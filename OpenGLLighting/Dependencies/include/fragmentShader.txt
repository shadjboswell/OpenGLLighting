#version 330 core
out vec4 FragColor;
  
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 viewPos;
uniform float kD;
uniform float kS;

in vec3 fragPos;
in vec3 normals;
in vec3 lightPos;

void main()
{
    vec3 norm = normalize(normals);
    vec3 lightDir = normalize(lightPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    vec3 viewDir = normalize(-fragPos);
    vec3 h = normalize(viewDir + lightDir);

    float cosTheta = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = cosTheta * kD * lightColor;

    float cosPhi = max(dot(norm, h),0.0);
    vec3 spec = pow(cosPhi,32) * kS * lightColor;
    vec3 ambient = 0.1 * lightColor;

    vec3 result = (diffuse + spec + ambient) * objectColor;;

    FragColor = vec4(result, 1.0);
}
